[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "winsound",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winsound",
        "description": "winsound",
        "detail": "winsound",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "tensorflow_text",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow_text",
        "description": "tensorflow_text",
        "detail": "tensorflow_text",
        "documentation": {}
    },
    {
        "label": "tensorflow_hub",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow_hub",
        "description": "tensorflow_hub",
        "detail": "tensorflow_hub",
        "documentation": {}
    },
    {
        "label": "gradio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gradio",
        "description": "gradio",
        "detail": "gradio",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "autocast",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "StableDiffusionPipeline",
        "importPath": "diffusers",
        "description": "diffusers",
        "isExtraImport": true,
        "detail": "diffusers",
        "documentation": {}
    },
    {
        "label": "load_dataset",
        "importPath": "datasets",
        "description": "datasets",
        "isExtraImport": true,
        "detail": "datasets",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "bidict",
        "importPath": "bidict",
        "description": "bidict",
        "isExtraImport": true,
        "detail": "bidict",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "12_ton_technik",
        "description": "12_ton_technik",
        "peekOfCode": "class Note:\n    pitch: str # pitch name (C, C#, D, D#, E, F, F#, G, G#, A, A#, H)\n    octave: int # octave number (0-8)\n    duration: int # duration in 16th notes (1-16)\n    def __init__(self, pitch: str, octave: int = 4, duration: int = 4):\n        self.pitch = pitch\n        self.octave = octave\n        self.duration = duration\n    def __str__(self):\n        return f\"{self.pitch}{self.octave}:{self.duration}\"",
        "detail": "12_ton_technik",
        "documentation": {}
    },
    {
        "label": "note_lookup",
        "kind": 5,
        "importPath": "12_ton_technik",
        "description": "12_ton_technik",
        "peekOfCode": "note_lookup = {\n    \"C\": 261.63,\n    \"C#\": 277.18,\n    \"D\": 293.66,\n    \"D#\": 311.13,\n    \"E\": 329.63,\n    \"F\": 349.23,\n    \"F#\": 369.99,\n    \"G\": 392.00,\n    \"G#\": 415.30,",
        "detail": "12_ton_technik",
        "documentation": {}
    },
    {
        "label": "notes",
        "kind": 5,
        "importPath": "12_ton_technik",
        "description": "12_ton_technik",
        "peekOfCode": "notes = []\nunused_notes = list(note_lookup.keys())\nfor i in range(12):\n    pitch = random.choice(unused_notes)\n    unused_notes.remove(pitch)\n    octave = random.choice([3, 4, 5])\n    duration = random.choice([1, 2, 4, 8])\n    notes.append(Note(pitch, octave, duration))\nfor note in notes:\n    print(note)",
        "detail": "12_ton_technik",
        "documentation": {}
    },
    {
        "label": "unused_notes",
        "kind": 5,
        "importPath": "12_ton_technik",
        "description": "12_ton_technik",
        "peekOfCode": "unused_notes = list(note_lookup.keys())\nfor i in range(12):\n    pitch = random.choice(unused_notes)\n    unused_notes.remove(pitch)\n    octave = random.choice([3, 4, 5])\n    duration = random.choice([1, 2, 4, 8])\n    notes.append(Note(pitch, octave, duration))\nfor note in notes:\n    print(note)\n    note.play()",
        "detail": "12_ton_technik",
        "documentation": {}
    },
    {
        "label": "float_arr_to_str_arr",
        "kind": 2,
        "importPath": "float_to_str_arr",
        "description": "float_to_str_arr",
        "peekOfCode": "def float_arr_to_str_arr(float_arr: list[float]) -> str:\n    int_arr = [round((x + 1) * 127.5) for x in float_arr]\n    char_arr = [chr(x) for x in int_arr]\n    return \"\".join(char_arr)\ndef str_arr_to_float_arr(str_arr: str) -> list[float]:\n    int_arr = [ord(x) for x in str_arr]\n    float_arr = [(x / 127.5) - 1 for x in int_arr]\n    return float_arr\nimport tensorflow as tf\nimport tensorflow_text as text",
        "detail": "float_to_str_arr",
        "documentation": {}
    },
    {
        "label": "str_arr_to_float_arr",
        "kind": 2,
        "importPath": "float_to_str_arr",
        "description": "float_to_str_arr",
        "peekOfCode": "def str_arr_to_float_arr(str_arr: str) -> list[float]:\n    int_arr = [ord(x) for x in str_arr]\n    float_arr = [(x / 127.5) - 1 for x in int_arr]\n    return float_arr\nimport tensorflow as tf\nimport tensorflow_text as text\nimport tensorflow_hub as hub\nmodel = hub.load(\"https://tfhub.dev/google/universal-sentence-encoder-multilingual/3\")\ndef embeddings(text: str) -> str:\n    embed = model([text])",
        "detail": "float_to_str_arr",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 2,
        "importPath": "float_to_str_arr",
        "description": "float_to_str_arr",
        "peekOfCode": "def embeddings(text: str) -> str:\n    embed = model([text])\n    str_arr = float_arr_to_str_arr(embed[0])\n    return str_arr",
        "detail": "float_to_str_arr",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "float_to_str_arr",
        "description": "float_to_str_arr",
        "peekOfCode": "model = hub.load(\"https://tfhub.dev/google/universal-sentence-encoder-multilingual/3\")\ndef embeddings(text: str) -> str:\n    embed = model([text])\n    str_arr = float_arr_to_str_arr(embed[0])\n    return str_arr",
        "detail": "float_to_str_arr",
        "documentation": {}
    },
    {
        "label": "generate_image",
        "kind": 2,
        "importPath": "gradio_sdxl_turbo",
        "description": "gradio_sdxl_turbo",
        "peekOfCode": "def generate_image(\n    prompt: str, \n    samples: int,\n    steps: int,\n    scale: float,\n    seed: int\n) -> Image.Image:\n    generator = pipe.generator(device=device).manual_seed(seed)\n    with autocast(\"cuda\"):\n        image_list = generator(prompt, samples=samples, steps=steps, scale=scale)",
        "detail": "gradio_sdxl_turbo",
        "documentation": {}
    },
    {
        "label": "model_id",
        "kind": 5,
        "importPath": "gradio_sdxl_turbo",
        "description": "gradio_sdxl_turbo",
        "peekOfCode": "model_id = \"stabilityai/sdxl-turbo\"\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\npipe = StableDiffusionPipeline.from_pretrained(model_id).to(device)\ndef generate_image(\n    prompt: str, \n    samples: int,\n    steps: int,\n    scale: float,\n    seed: int\n) -> Image.Image:",
        "detail": "gradio_sdxl_turbo",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 5,
        "importPath": "gradio_sdxl_turbo",
        "description": "gradio_sdxl_turbo",
        "peekOfCode": "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\npipe = StableDiffusionPipeline.from_pretrained(model_id).to(device)\ndef generate_image(\n    prompt: str, \n    samples: int,\n    steps: int,\n    scale: float,\n    seed: int\n) -> Image.Image:\n    generator = pipe.generator(device=device).manual_seed(seed)",
        "detail": "gradio_sdxl_turbo",
        "documentation": {}
    },
    {
        "label": "pipe",
        "kind": 5,
        "importPath": "gradio_sdxl_turbo",
        "description": "gradio_sdxl_turbo",
        "peekOfCode": "pipe = StableDiffusionPipeline.from_pretrained(model_id).to(device)\ndef generate_image(\n    prompt: str, \n    samples: int,\n    steps: int,\n    scale: float,\n    seed: int\n) -> Image.Image:\n    generator = pipe.generator(device=device).manual_seed(seed)\n    with autocast(\"cuda\"):",
        "detail": "gradio_sdxl_turbo",
        "documentation": {}
    },
    {
        "label": "iface",
        "kind": 5,
        "importPath": "gradio_sdxl_turbo",
        "description": "gradio_sdxl_turbo",
        "peekOfCode": "iface = gr.Interface(\n    fn = generate_image,\n    inputs = [\n        gr.Textbox(placeholder=\"Enter a prompt...\"),\n        gr.Slider(label=\"Samples\", minimum=1, maximum=10, value=1, step=1),\n        gr.Number(label=\"Steps\", value=4, step=1),\n        gr.Slider(label=\"Scale\", minimum=0, maximum=14, value=7, step=1),\n        gr.Number(label=\"Seed\", value=0, step=1)\n    ],\n    outputs = gr.Image(label=\"Generated Image\"),",
        "detail": "gradio_sdxl_turbo",
        "documentation": {}
    },
    {
        "label": "Board",
        "kind": 6,
        "importPath": "inception_tic_tac_toe",
        "description": "inception_tic_tac_toe",
        "peekOfCode": "class Board:\n    __board: list[list[Union[str, None, \"Board\"]]]\n    def __init__(self) -> None:\n        self.__board = [[None for _ in range(3)] for _ in range(3)]\n    def get_value(self, x_cord: int, y_cord: int) -> Union[str, None, \"Board\"]:\n        return self.__board[x_cord][y_cord]\n    def set_value(self, x_cord: int, y_cord: int, value: str | None) -> None:\n        self.__board[x_cord][y_cord] = value\n    def clear(self) -> None:\n        self.fill(None)",
        "detail": "inception_tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "inception_tic_tac_toe",
        "description": "inception_tic_tac_toe",
        "peekOfCode": "board = Board()\nfor x in range(3):\n    for y in range(3):\n        board.set_value(x, y, Board())\nnumpad_to_cords = { #numpad number -> (x, y)\n    #indexing starts from the top left\n    7: (0, 0),\n    8: (1, 0),\n    9: (2, 0),\n    4: (0, 1),",
        "detail": "inception_tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "numpad_to_cords",
        "kind": 5,
        "importPath": "inception_tic_tac_toe",
        "description": "inception_tic_tac_toe",
        "peekOfCode": "numpad_to_cords = { #numpad number -> (x, y)\n    #indexing starts from the top left\n    7: (0, 0),\n    8: (1, 0),\n    9: (2, 0),\n    4: (0, 1),\n    5: (1, 1),\n    6: (2, 1),\n    1: (0, 2),\n    2: (1, 2),",
        "detail": "inception_tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "numpad_to_cords",
        "kind": 5,
        "importPath": "inception_tic_tac_toe",
        "description": "inception_tic_tac_toe",
        "peekOfCode": "numpad_to_cords = bidict(numpad_to_cords)\ncurrent_playing_board = board.get_value(1, 1) #start in the middle board\nwhile True:\n    current_playing_board.show_numpad_numbers()\n    print(board.__repr__())\n    print(\"Player 1, make your move\")\n    move = int(input())\n    x_board, y_board = numpad_to_cords[move]\n    current_playing_board.set_value(y_board, x_board, \"X\")\n    current_playing_board.clear_numpad_numbers()",
        "detail": "inception_tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "current_playing_board",
        "kind": 5,
        "importPath": "inception_tic_tac_toe",
        "description": "inception_tic_tac_toe",
        "peekOfCode": "current_playing_board = board.get_value(1, 1) #start in the middle board\nwhile True:\n    current_playing_board.show_numpad_numbers()\n    print(board.__repr__())\n    print(\"Player 1, make your move\")\n    move = int(input())\n    x_board, y_board = numpad_to_cords[move]\n    current_playing_board.set_value(y_board, x_board, \"X\")\n    current_playing_board.clear_numpad_numbers()\n    won_player = current_playing_board.won_by()",
        "detail": "inception_tic_tac_toe",
        "documentation": {}
    }
]